// <auto-generated />
using System;
using DocumentAssistantLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentAssistantLibrary.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginalLanguageID")
                        .HasColumnType("int");

                    b.Property<int?>("SignsSize")
                        .HasColumnType("int");

                    b.Property<int?>("TargetLanguageID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeDone")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DocumentID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OriginalLanguageID");

                    b.HasIndex("TargetLanguageID");

                    b.HasIndex("TypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.DocumentType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Document", b =>
                {
                    b.HasOne("DocumentAssistantLibrary.Models.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("DocumentAssistantLibrary.Models.Language", "OriginalLanguage")
                        .WithMany("OriginalDocuments")
                        .HasForeignKey("OriginalLanguageID");

                    b.HasOne("DocumentAssistantLibrary.Models.Language", "TargetLanguage")
                        .WithMany("TargetDocuments")
                        .HasForeignKey("TargetLanguageID");

                    b.HasOne("DocumentAssistantLibrary.Models.DocumentType", "DocumentTypes")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.HasOne("DocumentAssistantLibrary.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Customers");

                    b.Navigation("DocumentTypes");

                    b.Navigation("OriginalLanguage");

                    b.Navigation("TargetLanguage");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.User", b =>
                {
                    b.HasOne("DocumentAssistantLibrary.Models.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DocumentAssistantLibrary.Models.Language", b =>
                {
                    b.Navigation("OriginalDocuments");

                    b.Navigation("TargetDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
